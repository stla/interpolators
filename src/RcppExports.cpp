// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "interpolators_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ipr_barycentricRational
Rcpp::XPtr<ipr_barycentric_rational> ipr_barycentricRational(Rcpp::NumericVector x, Rcpp::NumericVector y, size_t order);
RcppExport SEXP _interpolators_ipr_barycentricRational(SEXP xSEXP, SEXP ySEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< size_t >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(ipr_barycentricRational(x, y, order));
    return rcpp_result_gen;
END_RCPP
}
// eval_barycentricRational
Rcpp::NumericVector eval_barycentricRational(Rcpp::XPtr<ipr_barycentric_rational> ipr_xptr, Rcpp::NumericVector x);
RcppExport SEXP _interpolators_eval_barycentricRational(SEXP ipr_xptrSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<ipr_barycentric_rational> >::type ipr_xptr(ipr_xptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_barycentricRational(ipr_xptr, x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_interpolators_ipr_barycentricRational", (DL_FUNC) &_interpolators_ipr_barycentricRational, 3},
    {"_interpolators_eval_barycentricRational", (DL_FUNC) &_interpolators_eval_barycentricRational, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_interpolators(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
